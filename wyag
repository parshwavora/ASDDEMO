#!/usr/bin/env python3

import argparse
import libwyag as wyag
import sys



argparser = argparse.ArgumentParser(description="The studpid content tracker")

argsubparsers = argparser.add_subparsers(title="Commands", dest="command")
argsubparsers.required = True

argsp = argsubparsers.add_parser("init", help="Initilize a new, empty repository.")

argsp.add_argument("path",
                    metavar="directory",
                    nargs="?",
                    default=".",
                    help="Where to create the repository.")

def cmd_init(args):
    wyag.repo_create(args.path)

# cat-file subparser
argsp = argsubparsers.add_parser("cat-file", help="Provide content of repository objects")
argsp.add_argument("type",
                    metavar="type",
                    choices=["blob", "commit", "tag", "tree"],
                    help="Specify the object type")
argsp.add_argument("object",
                    metavar="object",
                    help="The object to display")

def cmd_cat_file(args):
    repo = wyag.repo_find()
    cat_file(repo, args.object, fmt=args.type.encode())

def cat_file(repo, obj, fmt=None):
    obj = wyag.object_read(repo, wyag.object_find(repo, obj, fmt=fmt))
    sys.stdout.buffer.write(obj.serialize())


# hash-object
argsp = argsubparsers.add_parser("hash-object", help="Compute object ID and optionally creates a blob from a file")
argsp.add_argument("-t",
                    metavar="type",
                    dest="type",
                    choices=["blob", "commit", "tag", "tree"],
                    default="blob",
                    help="Specify the type")
argsp.add_argument("-w",
                    dest="write",
                    action="store_true",
                    help="Actually write the object into the database")
argsp.add_argument("path", help="Read object from <file>")

def cmd_hash_object(args):
    if args.write:
        repo = wyag.GitRepository(".")
    else:
        repo = None

    with open(args.path, "rb") as f:
        sha = wyag.object_hash(f, args.type.encode(), repo)
        print(sha)


# log command
argsp = argsubparsers.add_parser("log", help="Display history of a given commit.")
argsp.add_argument("commit",
                    default="HEAD",
                    nargs="?",
                    help="Commit to start at.")

def cmd_log(args):
    repo = wyag.repo_find()

    print("digraph wyaglog{")
    log_graphviz(repo, wyag.object_find(repo, args.commit), set())
    print("}")

def log_graphviz(repo, sha, seen):
    if sha in seen:
        return
    seen.add(sha)

    commit = wyag.object_read(repo, sha)
    assert(commit.fmt == b'commit')

    if not b'parent' in commit.kvlm.keys():
        # base case: the initial commit
        return

    parents = commit.kvlm[b'parent']

    if type(parents) != list:
        parents = [ parents ]

    for p in parents:
        p = p.decode("ascii")
        print("c_{0} -> c_{1}".format(sha, p))
        log_graphviz(repo, p, seen)


# ls-tree command
argsp = argsubparsers.add_parser("ls-tree", help="Pretty-print a tree object")
argsp.add_argument("object", help="The object to show.")

def cmd_ls_tree(args):
    repo = wyag.repo_find()
    obj = wyag.object_read(repo, wyag.object_find(repo, args.object, fmt=b'tree'))

    if obj.fmt == b'commit':
        obj = wyag.object_read(repo, obj.kvlm[b'tree'].decode("ascii"))

    for item in obj.items:
        print("{0} {1} {2}\t{3}".format(
            "0" * (6 -len(item.mode)) + item.mode.decode("ascii"),
            wyag.object_read(repo, item.sha).fmt.decode("ascii"),
            item.sha,
            item.path.decode("ascii")
        ))




def main(argv=sys.argv[1:]):
    args = argparser.parse_args(argv)

    if   args.command == "init"        : cmd_init(args)
    elif args.command == "cat-file"    : cmd_cat_file(args)
    elif args.command == "hash-object" : cmd_hash_object(args)
    elif args.command == "log"         : cmd_log(args)
    elif args.command == "ls-tree"     : cmd_ls_tree(args)
    else :
        print("No command specified")
        return -1


main()